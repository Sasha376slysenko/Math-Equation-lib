from types import MappingProxyType
from typing import Mapping

dict_equations: Mapping[str, list[str]] = MappingProxyType({
    '4': [
        '1-0+0=1', # 1
        '6=8-1-1', # 2
        '8=8-6*0', # 3
        '7=9-6+4', # 4
        '2-8=0-6', # 5
        '6-9+6=3', # 6
        '4=1+3+0', # 7
        '7+5=4*3', # 8
        '2+0=5-3', # 9
        '8=8-0*2' # 10
    ],
    '4-b': [
        '2=1-(3-4)', # 1
        '6=(8-1)-1', # 2
        '8=8+(6*0)', # 3
        '(2+5)=9-2', # 4
        '5=(7*5)/7', # 5
        '(3+9)=(5+7)', # 6
        '(7*4)/4=7', # 7
        '(5/8)=5/8', # 8
        '7=(9-6)+4', # 9
        '1=(9-8)-0' # 10
    ],
    '5': [
        '2=7-8-2+5', # 1
        '4*1-5=6-7', # 2
        '8+3+1=6+6', # 3
        '9/9=2+8-9', # 4
        '4+6-2=2*4', # 5
        '3-9+5*2=4', # 6
        '2*1+9=5+6', # 7
        '8*3=3*9-3', # 8
        '4+9*0+2=6', # 9
        '3=9/9+6-4' # 10
    ],
    '5-b': [
        '(2+7)-(8/2)=5', # 1
        '(4*1)-5=(6-7)', # 2
        '(8+3)+1-6=6', # 3
        '(6*2)/(9/6)=8', # 4
        '(1+7)-7=(3-2)', # 5
        '(4-1)=(6+3)/3', # 6
        '(6-7)*2=2-4', # 7
        '4/(6+2)=2/4', # 8
        '(3-9)+(5*2)=4', # 9
        '(4-7)*(5-6)=3' # 10
    ],
    '6': [
        '6+6*0=6+2-2', # 1
        '3=3+0/1*4*2', # 2
        '6-5+4=8+4-7', # 3
        '4*2=8-1+5-4', # 4
        '7/6*6-3=2*2', # 5
        '8=5+2-0*4+1', # 6
        '1-5+8=8-1-3', # 7
        '3=6/2-4/5+8', # 8
        '9=2/6*0+7+2', # 9
        '9+4+3-4=6+6' # 10
    ],
    '6-b': [
        '(6+0)/2-(0+0)=3', # 1
        '8+3=6*(8-5)-7', # 2
        '3=(6/2)-4/5*8', # 3
        '6/6=0*9-(5-6)', # 4
        '(2+6)-0=2-1+7', # 5
        '(6/4)*8=(5+1)+6', # 6
        '8+6/(1/1)=7*2', # 7
        '8=9-2+(8/8)*1', # 8
        '1*(6/2)-6*8=3', # 9
        '5=2+(7*6)/2/7' # 10
    ],
    '7': [
        '7+5-3+2+5=8*2', # 1
        '3=3-4*9*7*0/8', # 2
        '4+3+4+1/1=3*4', # 3
        '4-7/1=7*1-3-7', # 4
        '7/7-3*5/7/3=1', # 5
        '3*3=6-3+8/8+5', # 6
        '7+5-3+2=5+8-2', # 7
        '7=5-9*4-4+6*7', # 8
        '3*3-6+3=8/8+5', # 9
        '7+2=2*6+1-3-1' # 10
    ],
    '7-b': [
        '4+6/9/5*(5*0)=4', # 1
        '(7/5)=3-2/5*(8/2)', # 2
        '6+(6-6)/8+7=9+4', # 3
        '(7/7)-3/5/(7/3)=1', # 4
        '7/7-3/(5*7)+3=1', # 5
        '3=(3+6)/3-8*8/5', # 6
        '3+(3-4)=9-7-0/8', # 7
        '(4+8)-(9+6)-0+5=2', # 8
        '(3-7)=(4-8)-9/8/7', # 9
        '(4*3)/(4-1)-1*3=4' # 10
    ],
    '8': [
        '9=1+1*8-3*6+9*6', # 1
        '8=7-0/6/6/6-5+6', # 2
        '4*0-2+7+3-2*3=2', # 3
        '9=8/2-3+4+2/1*2', # 4
        '8=9/4-1-9/1/4+9', # 5
        '9=8/2-3+4+2*1*2', # 6
        '5*2=6+8-5*1+4-3', # 7
        '8=3-0*7+2*5-9+4', # 8
        '9=8+2*3/4*2*1-2', # 9
        '4*0/2*7+3/2=3/2' # 10
    ],
    '8-b': [
        '8*(3*0)*7*2+5=9-4', # 1
        '5=2+(6-8)*5+1+4*3', # 2
        '9*(8/2)/3/4=2-1+2', # 3
        '(9*1)+1-8=3/6+9/6', # 4
        '8=7+0/(6/6)/6-5+6', # 5
        '9=(8-2)/3+4+2-1+2', # 6
        '8*(3+0)=7*2+5+9-4', # 7
        '8=(9-4)*1*9-1-4*9', # 8
        '(2*2)=(4/3)*6/2-3/7', # 9
        '2*2/(4*3)*6+2+3=7' # 10
    ],
    '45678': [
        '1-0+0=1', # 1
        '6-9+6=3', # 2
        '2=7-8-2+5', # 3
        '9/9=2+8-9', # 4
        '6-5+4=8+4-7', # 5
        '4*2=8-1+5-4', # 6
        '7+5-3+2+5=8*2', # 7
        '3*3-6+3=8/8+5', # 8
        '9=1+1*8-3*6+9*6', # 9
        '5*2=6+8-5*1+4-3', # 10
    ],
    '45678-b': [
        '(2+5)=9-2', # 1
        '6=(8-1)-1', # 2
        '(2+7)-(8/2)=5', # 3
        '(6*2)/(9/6)=8', # 4
        '(6+0)/2-(0+0)=3', # 5
        '(6/4)*8=(5+1)+6', # 6
        '(7/5)=3-2/5*(8/2)', # 7
        '(4+8)-(9+6)-0+5=2', # 8
        '8=(9-4)*1*9-1-4*9', # 9
        '2*2/(4*3)*6+2+3=7' # 10
    ],
    '4-all':[
        '1-0+0=1', # 1
        '2=1-(3-4)', # 2
        '7=9-6+4', # 3
        '(2+5)=9-2', # 4
        '6-9+6=3', # 5
        '8=8+(6*0)', # 6
        '8=8-0*2', # 7
        '(5/8)=5/8', # 8
        '2+0=5-3', # 9
        '1=(9-8)-0' # 10
    ],
    '5-all':[
        '2=7-8-2+5', # 1
        '(2+7)-(8/2)=5', # 2
        '8+3+1=6+6', # 3
        '(4-7)*(5-6)=3', # 4
        '4+6-2=2*4', # 5
        '(3-9)+(5*2)=4', # 6
        '8*3=3*9-3', # 7
        '8+6/(1/1)=7*2', # 8
        '3=9/9+6-4', # 9
        '(4*1)-5=(6-7)' # 10
    ],
    '6-all':[
        '6+6*0=6+2-2', # 1
        '5=2+(7*6)/2/7', # 2
        '3=3+0/1*4*2', # 3
        '8+3=6*(8-5)-7', # 4
        '6-5+4=8+4-7', # 5
        '6/6=0*9-(5-6)', # 6
        '1-5+8=8-1-3', # 7
        '(2+6)-0=2-1+7', # 8
        '9+4+3-4=6+6',# 9
        '3=(6/2)-4/5*8' # 10
    ],
    '7-all':[
        '7+5-3+2+5=8*2', # 1
        '4+6/9/5*(5*0)=4', # 2
        '3=3-4*9*7*0/8', # 3
        '(7/5)=3-2/5*(8/2)', # 4
        '4+3+4+1/1=3*4', # 5
        '3=(3+6)/3-8*8/5', # 6
        '4-7/1=7*1-3-7', # 7
        '(4+8)-(9+6)-0+5=2', # 8
        '7/7-3*5/7/3=1', # 9
        '(4*3)/(4-1)-1*3=4' # 10
    ],
    '8-all':[
        '9=1+1*8-3*6+9*6', # 1
        '5=2+(6-8)*5+1+4*3', # 2
        '8=7-0/6/6/6-5+6', # 3
        '8*(3*0)*7*2+5=9-4', # 4
        '9=8/2-3+4+2/1*2', # 5
        '8=7+0/(6/6)/6-5+6', # 6
        '9=8/2-3+4+2*1*2', # 7
        '9=(8-2)/3+4+2-1+2', # 8
        '9=8+2*3/4*2*1-2', # 9
        '(2*2)=(4/3)*6/2-3/7' # 10
    ]
})

dict_digits: Mapping[str, list[str]] = MappingProxyType({
    '4-generation-equation-1': [
        '1234', # 1
        '4569', # 2
        '7896', # 3
        '1596', # 4
        '7536', # 5
        '7812', # 6
        '8923', # 7
        '4163', # 8
        '2589', # 9
        '9675', # 10
        '2307', # 11
        '3481', # 12
        '6720', # 13
        '5198', # 14
        '6042', # 15
        '3971', # 16
        '8650', # 17
        '1437', # 18
        '2098', # 19
        '7384', # 20
        '4710', # 21
        '8352', # 22
        '1947', # 23
        '5621', # 24
        '3091', # 25
        '8462', # 26
        '7850', # 27
        '6194', # 28
        '2843', # 29
        '6203'  # 30
    ],
    '4-generation-equation-2': [
        '1234', # 1
        '4569', # 2
        '7896', # 3
        '1596', # 4
        '7536', # 5
        '7812', # 6
        '8923', # 7
        '4163', # 8
        '2589', # 9
        '9675', # 10
        '3481', # 11
        '6720', # 12
        '2307', # 13
        '5198', # 14
        '6042', # 15
        '3971', # 16
        '8650', # 17
        '1437', # 18
        '2098', # 19
        '7384', # 20
        '6203', # 21
        '4710', # 22
        '8352', # 23
        '1947', # 24
        '5621', # 25
        '3091', # 26
        '8462', # 27
        '7850', # 28
        '6194', # 29
        '2843'  # 30
    ],
    '4-generation-equation-3': [
        '1238', # 1
        '1598', # 2
        '1563', # 3
        '1478', # 4
        '1236', # 5
        '1452', # 6
        '1249', # 7
        '9874', # 8
        '9632', # 9
        '1546', # 10
        '1235', # 11
        '7412', # 12
        '7896', # 13
        '7536', # 14
        '7463', # 15
        '9641', # 16
        '4523', # 17
        '7812', # 18
        '8923', # 19
        '8523', # 20
        '8614', # 21
        '8462', # 22
        '4826', # 23
        '5162', # 24
        '4896', # 25
        '8642', # 26
        '1548', # 27
        '6285', # 28
        '7912', # 29
        '4862' # 30
    ],
    '4-generation-equation-4': [
        '3901', # 1
        '2487', # 2
        '6249', # 3
        '1378', # 4
        '4852', # 5
        '7361', # 6
        '2983', # 7
        '1459', # 8
        '9304', # 9
        '7813', # 10
        '6923', # 11
        '8230', # 12
        '4716', # 13
        '3508', # 14
        '7291', # 15
        '1462', # 16
        '2037', # 17
        '5741', # 18
        '6480', # 19
        '9182', # 20
        '6025', # 21
        '8793', # 22
        '2618', # 23
        '5912', # 24
        '7681', # 25
        '1982', # 26
        '3457', # 27
        '7026', # 28
        '4837', # 29
        '6570'  # 30
    ],
    '4-generation-equation-5': [
        '1562', # 1
        '7341', # 2
        '9274', # 3
        '8621', # 4
        '4519', # 5
        '8370', # 6
        '5924', # 7
        '7132', # 8
        '6081', # 9
        '2496', # 10
        '3402', # 11
        '8705', # 12
        '9613', # 13
        '4581', # 14
        '2907', # 15
        '1763', # 16
        '8032', # 17
        '1543', # 18
        '4205', # 19
        '7580', # 20
        '1356', # 21
        '6214', # 22
        '9604', # 23
        '2837', # 24
        '5142', # 25
        '3806', # 26
        '6493', # 27
        '7213', # 28
        '8049', # 29
        '3127'  # 30
    ]
})